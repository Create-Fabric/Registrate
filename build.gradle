//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id "fabric-loom" version "1.6.+"
    id "io.freefair.lombok" version "8.10"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

version = "${project.mod_version}-MC${minecraft_version}"
group = "com.tterrag.registrate_fabric"
archivesBaseName = "Registrate-Fabric"

String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
String patch = buildNumber != null ? buildNumber : "99999"

version = version.replace("<patch>", patch)

repositories {
    mavenLocal()
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://mvn.devos.one/snapshots" }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.layered {
        it.officialMojangMappings { nameSyntheticMembers = false }
        it.parchment("org.parchmentmc.data:parchment-$parchment_minecraft_version:$parchment_version@zip")
    })
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modApi(include(fabricApi.module("fabric-data-generation-api-v1", project.fabric_version))) // include datagen api
    modApi(include("io.github.fabricators_of_create.Porting-Lib:tags:${project.porting_lib_version}")) { exclude(group: "io.vram") }
    modApi(include("io.github.fabricators_of_create.Porting-Lib:models:${project.porting_lib_version}")) { exclude(group: "io.vram") }
    modApi(include("io.github.fabricators_of_create.Porting-Lib:data:${project.porting_lib_version}")) { exclude(group: "io.vram") }

    compileOnly("org.projectlombok:lombok:1.18.34")

    implementation(include("com.google.code.findbugs:jsr305:3.0.2"))
    implementation("javax.annotation:javax.annotation-api:1.3.2")
}

tasks.register("buildOrPublish") {
    group = "build"
    String mavenUser = System.getenv("MAVEN_USER")
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.named("publish"))
        println "prepared for publish"
    } else {
        dependsOn(tasks.named("build"))
        println "prepared for build"
    }
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        compileClasspath += main.output
        runtimeClasspath += main.runtimeClasspath
        runtimeClasspath += main.output
        resources {
            srcDir("src/testmod/generated/resources")
            exclude("src/testmod/generated/resources/.cache")
        }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/registrate-fabric.accesswidener")

    runs {
        testmodClient {
            client()
            name "Testmod Client"
            source sourceSets.testmod
            runDir "run/test"
        }
        testmodServer {
            server()
            name "Testmod Server"
            source sourceSets.testmod
            runDir "run/test_server"
        }
        testmodDatagen {
            client()
            name "Testmod Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/testmod/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=testmod"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/testmod/resources")}"
            source sourceSets.testmod
        }
    }
}

lombok {
    version = "1.18.20"
}

delombok {
    format = [
            "suppressWarnings": "skip",
            "javaLangAsFQN": "skip"
    ]
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.delombokTask
    exclude "com.tterrag.registrate.test.*"
}

javadoc {
    source = delombok
    configure (options) {
        tags(
                'apiNote:a:API Note:',
                'implNote:a:Implementation Note:'
        )
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv("PUBLISH_SUFFIX")}/"
            credentials {
                username = System.getenv("MAVEN_USER")
                password = System.getenv("MAVEN_PASS")
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
