//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
plugins {
    id 'fabric-loom' version '0.11-SNAPSHOT'
    id "io.freefair.lombok" version "6.1.0-m3"
    id 'io.github.juuxel.loom-quiltflower' version '1.+' // Quiltflower, a better decompiler
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

version = "MC${minecraft_version}-${project.mod_version}"
group = "com.tterrag.registrate_fabric"
archivesBaseName = "Registrate-Fabric"

repositories {
    maven { url = 'https://repo.maven.apache.org/maven2' }
    maven { url = 'https://mvn.devos.one/snapshots' }
    maven { url = 'https://jitpack.io' }
}

dependencies {
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    implementation 'org.jetbrains:annotations:20.1.0'

    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    include(modImplementation(fabricApi.module("fabric-data-generation-api-v1", project.fabric_version))) // include datagen api

    modImplementation(include("me.alphamode:ForgeTags:2.1"))

    implementation(include("com.github.LlamaLad7:MixinExtras:0.0.12"))
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.0.12")

    compileOnly 'org.projectlombok:lombok:1.18.22'
}

task buildOrPublish {
    group = "build"
    String mavenUser = System.getenv().MAVEN_USER
    if (mavenUser != null && !mavenUser.isEmpty()) {
        dependsOn(tasks.getByName("publish"))
        println "prepared for publish"
    } else {
        dependsOn(tasks.getByName("build"))
        println "prepared for build"
    }
}

loom {
    accessWidenerPath = file("src/main/resources/registrate-fabric.accesswidener")

    runs {
        datagen {
            server()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

            runDir "build/datagen"
        }
    }
}

lombok {
    version = "1.18.20"
    config['lombok.addJavaxGeneratedAnnotation'] = 'true'
}

delombok {
    format = [
            'suppressWarnings': 'skip',
            'javaLangAsFQN': 'skip'
    ]
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.delombokTask
    exclude 'com.tterrag.registrate.test.*'
}

javadoc {
    source = delombok
    options.addStringOption('tag', 'apiNote:a:API Note:')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url = "https://mvn.devos.one/${System.getenv().PUBLISH_SUFFIX}/"
            credentials {
                username = System.getenv().MAVEN_USER
                password = System.getenv().MAVEN_PASS
            }
            authentication { basic(BasicAuthentication) }
        }
    }
}
